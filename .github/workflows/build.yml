name: Build and Release

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'
  PROJECT_NAME: delguard

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out -parallel=1 ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        args: --timeout=5m --issues-exit-code=0

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
        include:
          - goos: windows
            goarch: 386
          - goos: linux
            goarch: 386

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Get version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=$(git describe --tags --always --dirty)
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "git_commit=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "build_time=$(date -u '+%Y-%m-%d_%H:%M:%S')" >> $GITHUB_OUTPUT

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        VERSION: ${{ steps.version.outputs.version }}
        GIT_COMMIT: ${{ steps.version.outputs.git_commit }}
        BUILD_TIME: ${{ steps.version.outputs.build_time }}
      run: |
        mkdir -p dist
        BINARY_NAME="${PROJECT_NAME}-${VERSION}-${GOOS}-${GOARCH}"
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        go build \
          -ldflags "-X main.Version=${VERSION} -X main.BuildTime=${BUILD_TIME} -X main.GitCommit=${GIT_COMMIT} -s -w" \
          -o "dist/${BINARY_NAME}" \
          ./cmd/${PROJECT_NAME}

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PROJECT_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release
        for dir in artifacts/*/; do
          cp -r "$dir"* release/
        done
        
        # 创建压缩包
        cd release
        for file in ${PROJECT_NAME}-*; do
          if [[ "$file" == *"windows"* ]]; then
            zip "${file}.zip" "$file" ../README.md ../LICENSE 2>/dev/null || true
          else
            tar -czf "${file}.tar.gz" "$file" ../README.md ../LICENSE 2>/dev/null || true
          fi
        done
        
        # 生成校验和
        sha256sum *.zip *.tar.gz > checksums.sha256 2>/dev/null || true
        cd ..

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release/*.zip
          release/*.tar.gz
          release/checksums.sha256
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
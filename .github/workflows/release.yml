name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    name: Build for ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          # Windows builds
          - os: windows
            arch: amd64
            runner: windows-latest
            ext: .exe
          - os: windows
            arch: arm64
            runner: windows-latest
            ext: .exe
          - os: windows
            arch: 386
            runner: windows-latest
            ext: .exe
          
          # Linux builds
          - os: linux
            arch: amd64
            runner: ubuntu-latest
            ext: ""
          - os: linux
            arch: arm64
            runner: ubuntu-latest
            ext: ""
          - os: linux
            arch: arm
            runner: ubuntu-latest
            ext: ""
          - os: linux
            arch: 386
            runner: ubuntu-latest
            ext: ""
          
          # macOS builds
          - os: darwin
            arch: amd64
            runner: macos-latest
            ext: ""
          - os: darwin
            arch: arm64
            runner: macos-latest
            ext: ""

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Get dependencies
      run: go mod download

    - name: Run tests
      run: go test -v ./...

    - name: Build binary
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: 0
      run: |
        go build -ldflags="-s -w -X main.Version=${{ github.ref_name }}" -o delguard${{ matrix.ext }} .

    - name: Create archive (Windows)
      if: matrix.os == 'windows'
      run: |
        7z a DelGuard-${{ matrix.os }}-${{ matrix.arch }}.zip delguard${{ matrix.ext }} README.md LICENSE

    - name: Create archive (Unix)
      if: matrix.os != 'windows'
      run: |
        tar -czf DelGuard-${{ matrix.os }}-${{ matrix.arch }}.tar.gz delguard${{ matrix.ext }} README.md LICENSE

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: DelGuard-${{ matrix.os }}-${{ matrix.arch }}
        path: DelGuard-${{ matrix.os }}-${{ matrix.arch }}.*

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: DelGuard ${{ github.ref_name }}
        body: |
          ## DelGuard ${{ github.ref_name }}
          
          ### 新功能
          - 完整的跨平台安全删除功能
          - 支持回收站删除和永久删除
          - 多语言支持（中文、英文）
          - 交互式删除确认
          - 安全检查和路径保护
          - 文件恢复功能
          - 安全复制功能
          
          ### 安装方法
          
          #### Windows (PowerShell)
          ```powershell
          iwr -useb https://raw.githubusercontent.com/01luyicheng/DelGuard/main/install.ps1 | iex
          ```
          
          #### Linux/macOS (Bash)
          ```bash
          curl -fsSL https://raw.githubusercontent.com/01luyicheng/DelGuard/main/install.sh | bash
          ```
          
          ### 手动下载
          请根据您的操作系统和架构选择合适的版本下载。
          
          ### 使用方法
          ```bash
          # 删除文件到回收站
          delguard file.txt
          
          # 永久删除文件
          delguard -p file.txt
          
          # 交互式删除
          delguard -i *.txt
          
          # 查看帮助
          delguard --help
          ```
        draft: false
        prerelease: false

    - name: Upload Release Assets
      run: |
        for file in artifacts/*/DelGuard-*; do
          if [ -f "$file" ]; then
            echo "Uploading $file"
            gh release upload ${{ github.ref_name }} "$file"
          fi
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ['1.19', '1.20', '1.21']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Get dependencies
      run: go mod download

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Run benchmarks
      run: go test -bench=. -benchmem ./tests/benchmarks/

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.21'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out